{% extends 'common/map.html' %}

{% block scripts %}
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <meta name="apple-mobile-web-app-capable" content="yes">

    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.5/jquery.min.js" type="text/javascript" charset="utf-8"></script>
    <script src="http://maps.google.com/maps/api/js?v=3.5&amp;sensor=false"></script>
    <script src="/media/OpenLayers.js"></script>

    <link rel="stylesheet" href="/media/google.css" type="text/css">
    <link rel="stylesheet" href="/media/style2.css" type="text/css">
{% endblock %}
{% block scripts2 %}{% endblock scripts2 %}

{% block head %}
    <style type="text/css">
        .todo {
            padding:15px 10px 15px 60px;
            background-repeat: no-repeat;
            background-position: 8px center;
            color: #00529B;
            font-size: 8pt;
            background-image: url('/media/img/todo.gif');
        }
        li {
            text-decoration: none;
            list-style: none;
            width: 250px;
        }
        hr {
            display: block;
            position: relative;
            padding: 0;
            margin: 8px auto;
            width: 90%;
            clear: both;
            border: none;
            border-top: 0px solid #999;
            border-bottom: 1px solid #FCB100;
            font-size: 1px;
            line-height: 0;
            overflow: visible;
        }
        #map {
            width: 800px;
            height: 520px;
            border: 1px solid #ccc;
        }
        .themap {
            float:right;
        }
        .thepanel {
            width: 400px;
            float: left;
        }
        .container {
            width:1205px;
        }
        #step_container {
            height:380px;
        }
        .nav_selected {
            border: 1px dashed #ccc;
            font-weight:bold;
        }
        .nav_visited {
            color: black;
        }
        .nav_disabled {
            color: #ddd;
        }
        .nav {
            color: #ddd;
        }
        #wizard_nav_control {
            float:right;
            margin: 8px;
        }
        .step {
            padding: 8px;
        }
        a.button{
            text-decoration: none;
            padding-left: 9px;
            padding-right: 9px;
            padding-top: 4px;
            padding-bottom: 4px;
            border: 1px solid #ccc;
        }
    </style>
    <script type="text/javascript">
        var map, controls;
        var parcels, stand_edges, stands;
        var currentStep = 1;
        var steps = [undefined]; // start with a blank to make it 1-indexed

        function toggleControl(element) {
            for(key in controls) {
                var control = controls[key];
                if(element.value == key && element.checked) {
                    control.activate();
                } else {
                    control.deactivate();
                }
            }
        }

        function init() {
            map = new OpenLayers.Map('map');
            map.addControl(new OpenLayers.Control.LayerSwitcher());
            map.addControl(new OpenLayers.Control.MousePosition());
            
            var gphy = new OpenLayers.Layer.Google(
                "Google Physical",
                {type: google.maps.MapTypeId.TERRAIN}
            );
            var ghyb = new OpenLayers.Layer.Google(
                "Google Hybrid",
                {type: google.maps.MapTypeId.HYBRID, numZoomLevels: 20}
            );
            var gsat = new OpenLayers.Layer.Google(
                "Google Satellite",
                {type: google.maps.MapTypeId.SATELLITE, numZoomLevels: 22}
            );

            map.addLayers([gsat, gphy, ghyb]);

            map.setCenter(new OpenLayers.LonLat(-123.85, 41.45).transform(
                new OpenLayers.Projection("EPSG:4326"), map.getProjectionObject()), 12);
            
            for (var i=map.layers.length-1; i>=0; --i) {
                map.layers[i].animationEnabled = true;
            };

            // allow testing of specific renderers via "?renderer=Canvas", etc
            var renderer = OpenLayers.Util.getParameters(window.location.href).renderer;
            renderer = (renderer) ? [renderer] : OpenLayers.Layer.Vector.prototype.renderers;

            stands = new OpenLayers.Layer.Vector("Stands", {
                renderers: renderer
            });

            map.addLayers([stands]);

            controls = {
                poly: new OpenLayers.Control.DrawFeature(stands,
                            OpenLayers.Handler.Polygon),
            };

            for(var key in controls) {
                map.addControl(controls[key]);
            }

            var nav = $('#wizard_nav');
            $('.step').each( function () {
                steps.push(this);
                nav.append("<li class='nav' id='nav_" + $(this).attr('id') + "'>" + $(this).attr('title') + "</li>");
                $(this).hide();
            });

            gotoStep(currentStep, 0);

            $('#submit_stands').click( function() {
                var geojson_format = new OpenLayers.Format.GeoJSON();
                var len=stands.features.length;
                var f;
                var stands_json = [];
                for ( var i=0; i<len; ++i ){
                    f = stands.features[i]; 
                    stands_json.push(geojson_format.write(f));
                }
                $.post("/trees/stands/", 
                    { 'stands': stands }, 
                    function(data) {
                        controls['line'].deactivate();
                        parcels.removeAllFeatures();
                        stand_edges.removeAllFeatures();
                        stands.addFeatures(geojson_format.read(data));
                    },
                    'json'
                )
                .error(function() { alert("error"); });
            });

        }; //end init

        $('#nav_next').live('click', function(e) {
            e.preventDefault();
            gotoStep(currentStep + 1, currentStep);
        });

        $('#nav_prev').live('click', function(e) {
            e.preventDefault();
            gotoStep(currentStep - 1, currentStep);
        });

        function gotoStep(to, from) {
            step = steps[to];
            if (step === undefined) {
                return false;
            } 
            currentStep = to;
            if (currentStep <= 1) {
                $('#nav_prev').addClass('nav_disabled');
                $('#nav_next').removeClass('nav_disabled');
            } else if (currentStep == steps.length-1) {
                $('#nav_prev').removeClass('nav_disabled');
                $('#nav_next').addClass('nav_disabled');
            } else {
                $('#nav_prev').removeClass('nav_disabled');
                $('#nav_next').removeClass('nav_disabled');
            }

            $('.step').each( function () {
                $(this).hide();
                $("li#nav_" + $(this).attr('id')).removeClass('nav_selected');
            });
            var li = $("li#nav_" + $(step).attr('id'));
            li.addClass('nav_selected');
            li.addClass('nav_visited');
            li.removeClass('nav');
            $(step).show();

            // Validate
            if (to == 3 && from == 2) {
                console.log("Submit Polygons to server"); 
            } else if (to == 2) {
                console.log("Start digitizing");
                controls['poly'].activate();
            } else if (to == 1 && from == 2) {
                console.log("Stop digitizing");
                controls['poly'].deactivate();
            }


        };
        
        $(init);
    </script>
{% endblock %}

{% block body %}
        
    <div class="container">
        <h1 id="title"> Forestry Land Owner's Tool Demo</h1>
        <div class="themap">
            <!--
            <div id="controls"> 
                <ul id="controlToggle"> 
                    <li> 
                        <input type="radio" name="type" value="none" id="noneToggle"
                            onclick="toggleControl(this);" checked="checked" /> 
                        <label for="noneToggle">navigate</label> 
                    </li> 
                    <li> 
                        <input type="radio" name="type" value="line" id="lineToggle" onclick="toggleControl(this);" /> 
                        <label for="lineToggle">draw line</label> 
                    </li> 
                </ul> 
            </div> 
            -->
            <div id="map"></div>
        </div>
        <div id="wizard" class="thepanel">
            <div>
                <ul id="wizard_nav">
                </ul>
            </div>
            <hr/>
            <div id="step_container">
                <div class="step" id="step1" title="Step 1: Locate Property">
                <!--
                1)	Locate Property 
                a.	By APN
                b.	Assumption: Already have spatial representations of property, single polygon
                c.	Processing:  TreesAnalysis gets a parcel
                -->
                <p> Using the map controls on the right, zoom in to the extent of your property. </p>
                <p class="todo"> Search by placename, coordinates or APN </p>
                </div>

                <div class="step" id="step2" title="Step 2: Delineate Stand">
                <p> 
                Next, delineate the parcel into individual stands of trees. 
                Draw a line on the map that defines the edge or boundary of a stand and continue clicking in a clockwise direction 
                until you've mapped the stand.  When you're done, double click on the final point. 
                </p>
                <p> Repeat for as many stands as necessary </p>
                
                <p class="todo"> Add, Edit, Delete, Management controls for multiple stands. </p>
                <p class="todo"> Topology; dealing with gaps and slivers of adjacent stands </p>
                <p class="todo"> Extract unharvestable area such as stream buffer BMPs</p>

                <div style="padding: 10px;"><a href="#" class="button"><span id="submit_stands">Submit Stands</span></a></div>

                <!--
                2)	Delineate Stands
                a.	Parcel displayed as geojson in client
                b.	User digitizes lines to split up OR user uploads

                c.	Processing:
                i.	Build polygons
                ii.	Union with Stream Buffers
                iii.	Assign each stand to the TreeAnalysis 
                iv.	Run raster stats on each stand to derive slope, aspect, elev
                -->
                </div>

                <div class="step" id="step3" title="Step 3: Attribute Stands">
                3)	Attribute Stands manually
                a.	"We built X stands, Y riperain buffers. Now information about each one"
                b.	species, age class, density, dbh, height
                </div>

                <div class="step" id="step4" title="Step 4: FIA Plot data">
                4)	Enter Plot/Inventory data OR grab from FIA (simulate plot data)
                </div>
                <div class="step" id="step5" title="Step 5: blah data">
                4)	Enter Plot/Inventory data OR grab from FIA (simulate plot data)
                </div>
            </div>

            <div id="wizard_nav_control">
                <a href="#" class="button"><span id='nav_prev'>Prev</span></a>
                <a href="#" class="button"><span id='nav_next'>Next</span></a>
            </div>

         </div>
    </div>

{% endblock %}


